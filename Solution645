/**
*LZS
*Solution645:给定一个长度为n的取值为1~n的数组nums，寻找nums中重复的那个元素和丢失的那个元素，并以数组(顺序不规定)的形式返回。
*
*示例：input:nums=[1,2,2,4]; output:[2,3]
*示例：input:nums=[2,3,2]; output:[1,2]
*示例：input:nums=[2,3,3,4,5,6]; output:[1,3]
*
*思路1：使用set实现，效率较低
*	1.将nums中的元素存入set中，同时利用set.contains()找出重复的那个元素
*	2.判断从1~n的n个元素中哪个元素不在set中，这就是消失的那个元素
*	3.返回这两个元素组成的数组

*思路2：使用数组实现，效率较高
*	1.遍历nums，统计每个元素出现的次数，并将统计结果存入长度为n的数组count的对应个nums[i]个位置上，即索引为index=nums[i]-1的位置
*	2.检查count数组，如果count[index]为2，则说明index+1是出现两次的元素，如果count[index]为0，则说明index+1是消失的那个元素。
*	3.返回这两个元素组成的数组
**/

//思路1：
public class Solution {
    public int[] findErrorNums(int[] nums) {
        if(nums==null)  return null;
        
        Arrays.sort(nums);
        Set<Integer> set=new HashSet<>();
        int[] res=new int[2];
        
        for(int i=0;i<nums.length;i++){
            if(set.contains(nums[i]))
                res[0]=nums[i];
            set.add(nums[i]);
        }
            
        
        for(int i=0;i<nums.length;i++){
            if(!set.contains(i+1))
                res[1]=i+1;
        }
        return res;
    }
}

//思路2：
public class Solution {
    public int[] findErrorNums(int[] nums) {
        if(nums==null)  return null;
        
        int[] res=new int[2];
        int[] count=new int[nums.length];
        
        for(int i=0;i<nums.length;i++)  count[nums[i]-1]++;
        
        for(int i=0;i<nums.length;i++){
            if(count[i]==2) res[0]=i+1;
            else if(count[i]==0)    res[1]=i+1;
        }
        return res;
    }
}