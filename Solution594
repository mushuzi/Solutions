/**
*LZS
*Solution594:寻找最长和谐子序列。给定一个整形数组，返回由其包含元素组成的最长子串（要求子串的最大值和最小值只差为1）的长度。
*
*示例：input：[1,3,2,2,5,2,3,7] output:5 (最长和谐子串为[3,2,2,2,3])
*
*思路：使用map处理
*	1.使用map统计元素出现的次数：遍历nums，使用nums[i]作为键，nums[i]出现的次数作为值，一一添加进map中
*	2.遍历nums,对应当前元素nums[i],判断nums[i]+1是否在map中，如果存在，则当前和谐子序列的长度为map.get(item)+map.get(item+1)
*	3.比较当前的len与map.get(item)+map.get(item+1)的大小，保留大的作为新的len。
*	4.返回最后的len
**/

public class Solution {
    public int findLHS(int[] nums) {
        if(nums==null) return 0;
        
        int len=0;
        Map<Integer,Integer> map=new HashMap<>();
        
        for(int item:nums){
            if(map.containsKey(item))   map.put(item,map.get(item)+1);
            else    map.put(item,1);
			//以上两句if...else可以用map.put(item,map,getOrDefault(item,0)+1)代替，可以省去判断key是否存在的麻烦
        }
        
        for(int item:nums){
            if(map.containsKey(item+1)) len=Math.max(len,map.get(item)+map.get(item+1));
        }
        return len;
    }
}