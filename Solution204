/**
*LZS
*Solution204:给定整数n，计算不大于n的素数的个数
*
*思路1：利用素数的定义暴力求解，超时
*
*思路2：使用数组标记的方法
**/

//思路1：
public class Solution {
    public int countPrimes(int n) {
        if(n==0 || n==1)    return 0;
        int count=0;
        for(int num=2;num<n;num++){
            if(helper(num)) count++;
        }
        return count;
    }
    
    //判断数num是否是素数
    public boolean helper(int num){
        if(num==2)  return true;
        for(int i=2;i<num;i++){
            if(num%i==0)   return false;
        }
        return true;
    }
}


//思路2：使用数组标记的方法
public class Solution {
    public int countPrimes(int n) {
        boolean[] notPrime = new boolean[n]; //boolean默认值是false
        int count = 0;
        for (int i = 2; i < n; i++) 
        {
            for (int j = 2; i*j < n; j++) {
                notPrime[i*j] = true;
            }
        }
        for(int i=2;i<n;i++){	//质数一定是大于1的数，所以从2开始检查
            if(notPrime[i]==false)
                count++;
        }
        return count;
    }
}